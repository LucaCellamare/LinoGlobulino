{namespace Docs.soy}

/**
 * This is a Closure Template.
 *
 * To regenerate just English, run:
 *   make pond-docs-en
 *
 * To regenerate all languages, run:
 *   make languages
 */

/**
 * Documentation for lists.
 */
{template .lists_length}
<h3>List Length</h3>
  <p>TODO</p> <!-- TODO add explanation for list length. -->
{/template}

/**
 * Documentation for lists.
 */
{template .lists_getIndex}
<h3>Get Index</h3>
  <p>TODO</p> <!-- TODO add explanation for get index. -->
{/template}

/**
 * Documentation for controls_if block.
 */
{template .controls_if}
  <h3>If</h3>

  {if $ij.mode == 'blocks'}
    <p><img src="if.png" height="90" width="118"></p>
  {elseif $ij.mode == 'js'}
    <pre class="logicSpec spec">if (<i>condition</i>) {lb}{\n}
  {sp}{sp}<i>statements</i>{\n}
  {rb}{\n}
  {\n}
  {\n}
  if (<i>condition</i>) {lb}{\n}
  {sp}{sp}<i>statements</i>{\n}
  {rb} else if (<i>condition</i>) {lb}{\n}
  {sp}{sp}<i>statements</i>{\n}
  {rb}{\n}
  {\n}
  {\n}
  if (<i>condition</i>) {lb}{\n}
  {sp}{sp}<i>statements</i>{\n}
  {rb} else {lb}{\n}
  {sp}{sp}<i>statements</i>{\n}
  {rb}</pre>
  {/if}

  <p>If the condition is true, then execute the contained statements.
  The <code>if</code> may be followed by any number of
  other <code>else if</code> conditions, and at the end by
  an optional <code>else</code> condition that executes if none of the previous
  conditions were true.</p>
{/template}

/**
 * Documentation for logic_compare block.
 */
{template .logic_compare}
<h3>Equality</h3>

  {if $ij.mode == 'blocks'}
    <p><img src="equals.png" height="36" width="122"></p>
  {elseif $ij.mode == 'js'}
    <pre class="logicSpec spec">==    !=    &lt;    &lt;=    &gt;    &gt;=</pre>
  {/if}

  <p>These expressions compare two numbers and return <code>true</code> or <code>false</code>.
  The six available equality operators are:</p>

  <table>
    <tr>
      <th>Operator</td>
      <th>Example</td>
      <th>Returns</td>
    </tr>
    <tr>
      <td>Equals</td>
      <td><code>5 == 10</code></td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td>Not equals</td>
      <td><code>5 != 10</code></td>
      <td><code>true</code></td>
    </tr>
    <tr>
      <td>Less than</td>
      <td><code>5 &lt; 10</code></td>
      <td><code>true</code></td>
    </tr>
    <tr>
      <td>Less than or equal</td>
      <td><code>5 &lt;= 10</code></td>
      <td><code>true</code></td>
    </tr>
    <tr>
      <td>Greater than</td>
      <td><code>5 &gt; 10</code></td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td>Greater than or equal</td>
      <td><code>5 &gt;= 10</code></td>
      <td><code>false</code></td>
    </tr>
  </table>
{/template}

/**
 * Documentation for logic_operation block.
 */
{template .logic_operation}
  <h3>And/Or</h3>

  {if $ij.mode == 'blocks'}
    <p>
      <img src="and.png" height="36" width="124">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="logicSpec spec">&&    ||</pre>
  {/if}

  <p>'And' is represented by the <code>&&</code> operator.
  It returns <code>true</code> only if both inputs are <code>true</code>.</p>
  <p>'Or' is represented by the <code>||</code> operator.
  It returns <code>true</code> if either input is <code>true</code>.</p>
{/template}

/**
 * Documentation for logic_boolean block.
 */
{template .logic_boolean}
  <h3>Booleans</h3>

  {if $ij.mode == 'blocks'}
    <p><img src="true.png" height="26" width="68"></p>
  {elseif $ij.mode == 'js'}
    <pre class="logicSpec spec">true    false</pre>
  {/if}

  <p>Booleans can be used with variable to store whether something is <code>true</code> or
  <code>false</code>. It can also be used by the while loop to make a loop
  that executes forever.</p>
{/template}

/**
 * Documentation for logic_negate block.
 */
{template .logic_negate}
<h3>Not</h3>
  <p>TODO</p> <!-- TODO add explanation for negate. -->
{/template}

/**
 * Documentation for null block.
 */
{template .logic_null}
<h3>Null</h3>
  <p>TODO</p> <!-- TODO add explanation for null. -->
{/template}

/**
 * Documentation for controls_whileUntil block.
 */
{template .controls_whileUntil}
<h3>While</h3>

  {if $ij.mode == 'blocks'}
    <p><img src="while.png" height="90" width="118"></p>
  {elseif $ij.mode == 'js'}
    <pre class="loopsSpec spec">while (<i>condition</i>) {lb}{\n}
  {sp}{sp}<i>statements</i>{\n}
  {rb}</pre>
  {/if}

  <p>Loops will repeat executing the enclosed statements as long as the
  condition is true.</p>
{/template}

/**
 * Documentation for controls_for block.
 */
{template .controls_for}
<h3>For</h3>
  <p>TODO</p> <!-- TODO add explanation for for loops. -->
{/template}

/**
 * Documentation for controls_flow_statements block.
 */
{template .controls_flow_statements}
<h3>Break/Continue</h3>
  <p>TODO</p> <!-- TODO add explanation for break/continue. -->
{/template}

/**
 * Documentation for math_number block.
 */
{template .math_number}
<h3>Number</h3>

  {if $ij.mode == 'blocks'}
    <p><img src="number.png" height="26" width="37"></p>
  {elseif $ij.mode == 'js'}
    <pre class="mathSpec spec">123</pre>
  {/if}

  <p>Numbers are used for many things, including ranges, angles, and counters.
  Numbers may be negative (e.g. -360), or fractional (e.g. 3.14159),
  or very large (e.g. 9007199254740992).
  There is even a special number called <code>Infinity</code>.</p>

  <p>Do not use thousands separators (e.g. 9,000).</p>
{/template}

/**
 * Documentation for math_arithmetic block.
 */
{template .math_arithmetic}
<h3>Arithmetic</h3>

  {if $ij.mode == 'blocks'}
    <p>
      <img src="plus.png" height="36" width="113">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="mathSpec spec">+    -    *    /</pre>
  {/if}

  <p>These operators take two numbers and return a single number.
  The four available arithmetic operators are:</p>

  <table>
    <tr>
      <th>Operator</td>
      <th>Example</td>
      <th>Returns</td>
    </tr>
    <tr>
      <td>Plus</td>
      <td><code>3 + 4</code></td>
      <td><code>7</code></td>
    </tr>
    <tr>
      <td>Minus</td>
      <td><code>3 - 4</code></td>
      <td><code>-1</code></td>
    </tr>
    <tr>
      <td>Multiply</td>
      <td><code>3 * 4</code></td>
      <td><code>12</code></td>
    </tr>
    <tr>
      <td>Divide</td>
      <td><code>3 / 4</code></td>
      <td><code>0.75</code></td>
    </tr>
  </table>
{/template}

/**
 * Documentation for math_random_float block.
 */
{template .math_random_float}
  <h3>Random</h3>

  {if $ij.mode == 'blocks'}
    <p>
      <img src="math_random.png" height="26" width="124">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="mathSpec spec">Math.random()</pre>
  {/if}

  <p>This function returns a random fraction from 0.0 to 1.0.  To get a random
  number in a larger range, just multiply it by the maximum value.</p>
{/template}

/**
 * Documentation for variables.
 */
{template .variables}
  <h3>Assigning</h3>

  {if $ij.mode == 'blocks'}
    <p>
      <img src="var_set.png" height="40" width="165">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="variablesSpec spec">var <i>name</i> = <i>value</i>;</pre>
  {/if}

  <p>Assigns a value (usually a number) to the named variable.
  The name of the variable should be something that makes sense,
  such as <code>range</code> or <code>angle</code>.</p>

  {if $ij.mode == 'js'}
  <p>Note that variable names are case-sensitive,
  thus <code>angle</code> and <code>Angle</code> are two completely different
  variables.  Variable names must only use the English letters a-z, and numbers.
  Variable names may not start with a number.</p>

  <p>The <code>var</code> keyword may be omitted on all but the first assignment,
  but there is no harm in using it.</p>
  {/if}


  <h3>Retrieving</h3>

  {if $ij.mode == 'blocks'}
    <p>
      <img src="var_get.png" height="26" width="79">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="variablesSpec spec"><i>name</i></pre>
  {/if}

  <p>Retrieves the value (usually a number) that had previously been assigned
  to the named variable.</p>

  <h3>Incrementing</h3>

  {if $ij.mode == 'blocks'}
    <p>
      <img src="increment.png" height="41" width="159">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="mathSpec spec"><i>name</i> += <i>number</i>;</pre>
  {/if}

  <p>This is a shortcut for adding a number to an existing variable.
  There is no difference between the following two lines:</p>

  <pre>angle += 10;{\n}
  var angle = angle + 10;</pre>

  <p>Do not use <code>+=</code> on a variable that has not already been defined.
  If in doubt, assign the variable to 0 at the beginning of the program.</p>
{/template}

/**
 * Documentation for procedure definition and call blocks.
 */
{template .functions}
  <h3>Defining</h3>
  {if $ij.mode == 'blocks'}
    <p>
      <img src="def_procedure.png" height="74" width="276">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="functionsSpec spec">function <i>do_something</i>{lb}{\n}
      {sp}{sp}<i>statements</i>{\n}
      {rb}</pre>
  {/if}

  {if $ij.mode == 'blocks'}
    <p>
      <img src="def_procedure_return.png" height="84" width="276">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="functionsSpec spec">function <i>do_something</i>{lb}{\n}
      {sp}{sp}<i>statements</i>{\n}
      {sp}{sp}<i>return x</i>;{\n}
      {rb}</pre>
  {/if}


  <p>TODO</p> <!-- TODO add explanation for procedure definitions. -->

  <h3>Calling</h3>

  {if $ij.mode == 'blocks'}
    <p>
      <img src="call_procedure.png" height="31" width="142">
      <img src="call_procedure.png" height="31" width="142">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="functionsSpec spec"><i>do_something</i>();</pre>
  {/if}

  {if $ij.mode == 'blocks'}
    <p>
      <img src="call_procedure_return.png" height="24" width="146">
    </p>
  {elseif $ij.mode == 'js'}
    <pre class="functionsSpec spec"><i>do_something</i>()</pre>
  {/if}

  <p>TODO</p> <!-- TODO add explanation for procedure calls. -->

{/template}